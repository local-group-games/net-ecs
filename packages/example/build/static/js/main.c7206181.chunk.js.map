{"version":3,"sources":["../../core/dist/index.js","../../core/dist/system.js","../../core/dist/entityAdmin.js","../../core/dist/pool/stackPool.js","../../core/dist/util/index.js","../../core/dist/util/contains.js","../../core/dist/util/mutableRemove.js","../../core/dist/util/mutableRemoveUnordered.js","../../core/dist/util/resetObject.js","componentTypes.ts","entityAdmin.ts","components/health.ts","components/transform.ts","systems/damage.ts","systems/movement.ts","index.ts"],"names":["__export","m","p","exports","hasOwnProperty","Object","defineProperty","value","require","createSystem","query","update","stackPool_1","util_1","createEntityAdmin","clock","step","tick","time","components","Map","entitiesByComponent","WeakMap","systemQueryResults","updatedEntities","Set","deletedEntities","systems","entitySequence","updateQueryForEntity","system","entity","entityComponents","get","results","queryName","selector","selectorResults","isSelected","contains","isQueryHit","every","factory","find","component","$type","push","mutableRemoveUnordered","updateAllQueriesForEntity","i","length","addComponentToEntity","Error","c","add","componentEntities","set","removeComponentFromEntity","mutableRemove","delete","size","componentPools","release","getComponent","componentFactory","world","addSystem","keys","buildInitialSystemQueryResults","removeSystem","timeStep","result","forEach","clear","createEntity","destroyEntity","tryGetComponent","_a","createComponentFactory","type","defaults","instantiate","poolSize","reset","obj","assign","componentPool","createStackPool","resetObject","retain","args","heap","allocate","pop","arr","element","indexOf","index","splice","last","key","ComponentTypes","entityAdmin","window","Health","max","health","currentHealth","Transform","x","y","transform","damageable","damage","moving","movement","Math","sin","cos","previousTime","Date","now","setInterval","performance"],"mappings":"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","file":"static/js/main.c7206181.chunk.js","sourcesContent":["\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./system\"));\n__export(require(\"./entityAdmin\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction createSystem(query, update) {\n    return { update, query };\n}\nexports.createSystem = createSystem;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stackPool_1 = require(\"./pool/stackPool\");\nconst util_1 = require(\"./util\");\nfunction buildInitialSystemQueryResults(system) {\n    const results = {};\n    for (const queryName of Object.keys(system.query)) {\n        results[queryName] = [];\n    }\n    return results;\n}\nfunction createEntityAdmin() {\n    const clock = {\n        step: -1,\n        tick: -1,\n        time: 0,\n    };\n    const components = new Map();\n    const entitiesByComponent = new WeakMap();\n    const systemQueryResults = new WeakMap();\n    const updatedEntities = new Set();\n    const deletedEntities = new Set();\n    const systems = [];\n    let entitySequence = 0;\n    function addSystem(system) {\n        const results = buildInitialSystemQueryResults(system);\n        systems.push(system);\n        systemQueryResults.set(system, results);\n        for (const entity of components.keys()) {\n            updateQueryForEntity(system, entity);\n        }\n    }\n    function removeSystem(system) {\n        util_1.mutableRemove(systems, system);\n    }\n    function updateQueryForEntity(system, entity) {\n        const entityComponents = components.get(entity);\n        const results = systemQueryResults.get(system);\n        if (!entityComponents) {\n            for (const queryName in system.query) {\n                util_1.mutableRemoveUnordered(results[queryName], entity);\n            }\n            return;\n        }\n        for (const queryName in system.query) {\n            const selector = system.query[queryName];\n            const selectorResults = results[queryName];\n            const isSelected = util_1.contains(selectorResults, entity);\n            const isQueryHit = selector.every(factory => entityComponents.find(component => component.$type === factory.$type));\n            if (isQueryHit && !isSelected) {\n                selectorResults.push(entity);\n            }\n            else if (!isQueryHit && isSelected) {\n                util_1.mutableRemoveUnordered(selectorResults, entity);\n            }\n        }\n    }\n    function updateAllQueriesForEntity(entity) {\n        for (let i = 0; i < systems.length; i++) {\n            const system = systems[i];\n            updateQueryForEntity(system, entity);\n        }\n    }\n    function tick(timeStep) {\n        clock.step = timeStep;\n        clock.tick += 1;\n        clock.time += timeStep;\n        for (let i = 0; i < systems.length; i++) {\n            const system = systems[i];\n            const result = systemQueryResults.get(system);\n            if (result) {\n                system.update(world, result);\n            }\n        }\n        updatedEntities.forEach(updateAllQueriesForEntity);\n        updatedEntities.clear();\n        deletedEntities.forEach(entity => {\n            const entityComponents = components.get(entity);\n            if (entityComponents) {\n                for (let i = 0; i < entityComponents.length; i++) {\n                    removeComponentFromEntity(entity, entityComponents[i]);\n                }\n            }\n            components.delete(entity);\n            updateAllQueriesForEntity(entity);\n        });\n        deletedEntities.clear();\n    }\n    function createEntity(...entityComponents) {\n        const entity = (entitySequence += 1);\n        components.set(entity, []);\n        for (let i = 0; i < entityComponents.length; i++) {\n            addComponentToEntity(entity, entityComponents[i]);\n        }\n        updatedEntities.add(entity);\n        return entity;\n    }\n    function destroyEntity(entity) {\n        deletedEntities.add(entity);\n        return entity;\n    }\n    function addComponentToEntity(entity, component) {\n        const entityComponents = components.get(entity);\n        if (!entityComponents) {\n            throw new Error(`Attempted to add component ${component.$type} to unregistered entity ${entity}.`);\n        }\n        const hasComponentOfSameType = entityComponents.find(c => c.$type === component.$type);\n        if (hasComponentOfSameType) {\n            throw new Error(`Attempted to add component ${component.$type} to ${entity}, which already has a component of that type.`);\n        }\n        entityComponents.push(component);\n        updatedEntities.add(entity);\n        let componentEntities = entitiesByComponent.get(component);\n        if (!componentEntities) {\n            componentEntities = new Set();\n        }\n        componentEntities.add(entity);\n        entitiesByComponent.set(component, componentEntities);\n        return entity;\n    }\n    function removeComponentFromEntity(entity, component) {\n        const entityComponents = components.get(entity);\n        if (!entityComponents) {\n            throw new Error(`Attempted to remove component ${component.$type} to unregistered entity ${entity}.`);\n        }\n        const removed = util_1.mutableRemove(entityComponents, component);\n        if (removed) {\n            const componentEntities = entitiesByComponent.get(component);\n            componentEntities.delete(entity);\n            if (componentEntities.size === 0) {\n                const pool = componentPools.get(component.$type);\n                pool.release(component);\n                entitiesByComponent.delete(component);\n            }\n            updatedEntities.add(entity);\n        }\n        return entity;\n    }\n    function getComponent(entity, componentFactory) {\n        const entityComponents = components.get(entity);\n        if (!entityComponents) {\n            throw new Error(`Tried to get component ${componentFactory.$type} to unregistered entity ${entity}.`);\n        }\n        const { $type } = componentFactory;\n        for (let i = 0; i < entityComponents.length; i++) {\n            const component = entityComponents[i];\n            if (component.$type === $type) {\n                return component;\n            }\n        }\n        throw new Error(`Component not found on entity ${entity}.`);\n    }\n    function tryGetComponent(entity, componentFactory) {\n        try {\n            return getComponent(entity, componentFactory);\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    const componentPools = new Map();\n    function createComponentFactory(type, defaults, instantiate, poolSize) {\n        const reset = (obj) => {\n            Object.assign(obj, defaults);\n            obj.$type = type;\n            return obj;\n        };\n        const create = () => reset({});\n        const release = (obj) => {\n            util_1.resetObject(obj);\n            return reset(obj);\n        };\n        const componentPool = stackPool_1.createStackPool(create, release, poolSize);\n        function componentFactory(...args) {\n            const component = componentPool.retain();\n            instantiate(component, ...args);\n            return component;\n        }\n        componentPools.set(type, componentPool);\n        componentFactory.$type = type;\n        return componentFactory;\n    }\n    const world = {\n        addSystem,\n        removeSystem,\n        clock,\n        tick,\n        createEntity,\n        destroyEntity,\n        addComponentToEntity,\n        removeComponentFromEntity,\n        getComponent,\n        tryGetComponent,\n        createComponentFactory,\n    };\n    return world;\n}\nexports.createEntityAdmin = createEntityAdmin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction createStackPool(factory, reset, size) {\n    const heap = [];\n    const allocate = () => {\n        for (let i = 0; i < size; i++) {\n            heap.push(factory());\n        }\n    };\n    const retain = () => {\n        if (!heap.length) {\n            allocate();\n        }\n        return heap.pop();\n    };\n    const release = (obj) => {\n        heap.push(reset(obj));\n    };\n    return {\n        allocate,\n        retain,\n        release,\n    };\n}\nexports.createStackPool = createStackPool;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./contains\"));\n__export(require(\"./mutableRemove\"));\n__export(require(\"./mutableRemoveUnordered\"));\n__export(require(\"./resetObject\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction contains(arr, element) {\n    return arr.indexOf(element) > -1;\n}\nexports.contains = contains;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction mutableRemove(arr, element) {\n    const index = arr.indexOf(element);\n    if (index === -1) {\n        return false;\n    }\n    arr.splice(index, 1);\n    return true;\n}\nexports.mutableRemove = mutableRemove;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction mutableRemoveUnordered(arr, element) {\n    const length = arr.length;\n    const index = arr.indexOf(element);\n    if (index === -1) {\n        return false;\n    }\n    const last = arr.pop();\n    if (index < length - 1) {\n        arr[index] = last;\n    }\n    return true;\n}\nexports.mutableRemoveUnordered = mutableRemoveUnordered;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction resetObject(obj) {\n    for (const key in obj) {\n        delete obj[key];\n    }\n    return obj;\n}\nexports.resetObject = resetObject;\n","export enum ComponentTypes {\n  Health,\n  Transform,\n}\n","import { createEntityAdmin } from \"@net-ecs/core\"\n\nexport const entityAdmin = createEntityAdmin()\n;(window as any).entityAdmin = entityAdmin\n","import { ComponentTypes } from \"../componentTypes\"\nimport { entityAdmin } from \"../entityAdmin\"\n\nexport const Health = entityAdmin.createComponentFactory(\n  ComponentTypes.Health,\n  {\n    max: 0,\n    value: 0,\n  },\n  (health, max: number, currentHealth = max) => {\n    health.max = max\n    health.value = currentHealth\n  },\n  1000,\n)\n","import { ComponentTypes } from \"../componentTypes\"\nimport { entityAdmin } from \"../entityAdmin\"\n\nexport const Transform = entityAdmin.createComponentFactory(\n  ComponentTypes.Transform,\n  {\n    x: 0,\n    y: 0,\n  },\n  (transform, x: number, y: number) => {\n    transform.x = x\n    transform.y = y\n  },\n  1000,\n)\n","import { createSystem } from \"@net-ecs/core\"\nimport { Health } from \"../components/health\"\n\nconst query = { damageable: [Health] }\n\nconst DAMAGE_PER_SECOND = 10\n\nexport const damage = createSystem(query, (entityAdmin, { damageable }) => {\n  for (const entity of damageable) {\n    const health = entityAdmin.getComponent(entity, Health)\n\n    health.value -= DAMAGE_PER_SECOND * (entityAdmin.clock.step / 1000)\n\n    if (health.value <= 0) {\n      entityAdmin.destroyEntity(entity)\n    }\n  }\n})\n","import { createSystem } from \"@net-ecs/core\"\nimport { Transform } from \"../components/transform\"\n\nconst query = { moving: [Transform] }\n\nexport const movement = createSystem(query, (entityAdmin, { moving }) => {\n  for (const entity of moving) {\n    const transform = entityAdmin.getComponent(entity, Transform)\n\n    transform.x = Math.sin(entityAdmin.clock.time * 0.05)\n    transform.y = Math.cos(entityAdmin.clock.time * 0.05)\n  }\n})\n","import * as components from \"./components\"\nimport { entityAdmin } from \"./entityAdmin\"\nimport * as systems from \"./systems\"\n\nconst health = components.Health(100)\nconst transform = components.Transform(1, 1)\n\nentityAdmin.createEntity(health, transform)\nentityAdmin.createEntity(health, transform)\n\nentityAdmin.addSystem(systems.damage)\nentityAdmin.addSystem(systems.movement)\n\nlet previousTime: number = Date.now()\n\nsetInterval(() => {\n  const now = performance.now()\n  const timeStep = now - previousTime\n  entityAdmin.tick(timeStep)\n  previousTime = now\n}, (1 / 60) * 1000)\n// ;(window as any).components = components\n// ;(window as any).health = health\n// ;(window as any).transform = transform\n"],"sourceRoot":""}